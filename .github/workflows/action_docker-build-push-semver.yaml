name: Publish Docker image

on:
  workflow_call:
    inputs:
      dockerhub-account:
        description: "Dockerhub registry user/org namespace"
        default: ""
        required: true
        type: string
      github-account:
        description: "Github registry user/org namespace"
        default: ""
        required: true
        type: string
      image-name:
        description: "Container image name"
        default: ${{ github.repository }}
        required: false
        type: string
      context:
        description: "Path for build context"
        default: "./"
        required: false
        type: string
      dockerfile:
        description: "Path to the Dockerfile"
        default: "./Dockerfile"
        required: false
        type: string
    secrets:
      docker_username:
        description: "Dockerhub username"
        required: true
      docker_password:
        description: "Dockerhub password"
        required: true
      gh_username:
        description: "Github username"
        required: true
      gh_token:
        description: "Github registry access token"
        required: true

jobs:
  build_images:
    name: Push Docker image to multiple registries
    runs-on: ubuntu-latest
    env:
      # Only update images on a push from the Application Bot
      UPDATE: ${{ github.event_name == 'push' && github.actor_id == '121982232' }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4

      - name: (Base Image Update) Save latest github tag
        if: env.UPDATE == 'true'
        uses: actions-ecosystem/action-get-latest-tag@v1
        id: get-latest-tag
        with:
          semver_only: true
          with_initial_version: true
          initial_version: "0.0.0"
      - name: (Base Image Update) Parse latest github tag
        if: env.UPDATE == 'true'
        id: parse-latest-tag
        uses: booxmedialtd/ws-action-parse-semver@v1
        with:
          input_string: ${{ steps.get-latest-tag.outputs.tag }}
      - name: (Base Image Update) Save latest image digest
        if: env.UPDATE == 'true'
        id: get-latest-digest
        run: |
          image=$(awk '$1 == "FROM" { print $2 }' ${{ inputs.dockerfile }})
          echo "latest_image_digest=${image}" >> $GITHUB_OUTPUT
      - name: (Base Image Update) Checkout the latest pushed tag
        if: env.UPDATE == 'true'
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4
        with:
          ref: ${{ steps.get-latest-tag.outputs.tag }}
      - name: (Base Image Update) Replace image with latest digest
        if: env.UPDATE == 'true'
        run: |
          sed -i "s/^FROM .*$/FROM ${{ steps.get-latest-digest.outputs.latest_image_digest }}/g" ${{ inputs.dockerfile }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Docker Hub
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.docker_username }}
          password: ${{ secrets.docker_password }}
      
      - name: Log in to the GitHub Container registry
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.gh_username }}
          password: ${{ secrets.gh_token }}
      
      - name: Extract metadata (tags, labels) for Docker
        id: metadata
        uses: docker/metadata-action@v4
        with:
          images: |
            docker.io/${{ inputs.dockerhub-account }}/${{ inputs.image-name }}
            ghcr.io/${{ inputs.github-account }}/${{ inputs.image-name }}
          tags: |
            # set latest tag for push on default branch
            type=raw,value=edge,enable={{is_default_branch}}
            type=raw,value=${{ steps.parse-latest-tag.outputs.major }},enable=${{env.UPDATE}}
            type=raw,value=${{ steps.parse-latest-tag.outputs.major }}.${{ steps.parse-latest-tag.outputs.minor }},enable=${{env.UPDATE}}
            type=raw,value=${{ steps.parse-latest-tag.outputs.major }}.${{ steps.parse-latest-tag.outputs.minor }}.${{ steps.parse-latest-tag.outputs.patch }},enable=${{env.UPDATE && steps.parse-latest-tag.outputs.major != 0 }}
            # On github tags event, set differant tags
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}
          flavor: |
            latest=${{ startsWith(github.ref, 'refs/tags/v') || env.UPDATE }}

      - name: Update DockerHub repo description
        if: ${{ github.event_name != 'pull_request' }}
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.docker_username }}
          password: ${{ secrets.docker_password }}
          repository: ${{ inputs.github-account }}/${{ inputs.image-name }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        with:
          context: ${{ inputs.context }}
          file: ${{ inputs.dockerfile }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}

